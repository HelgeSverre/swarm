#!/usr/bin/env php
<?php

use Dotenv\Dotenv;

// Find and load the autoloader
$possibleAutoloaders = [
    __DIR__ . '/../vendor/autoload.php',     // Local development
    __DIR__ . '/../../../autoload.php',      // Installed as dependency
    __DIR__ . '/../../vendor/autoload.php',  // Alternative structure
];

$autoloaderFound = false;
foreach ($possibleAutoloaders as $autoloader) {
    if (file_exists($autoloader)) {
        require $autoloader;
        $autoloaderFound = true;
        break;
    }
}

if (!$autoloaderFound) {
    exit("Could not find autoloader. Please run 'composer install' first.\n");
}

// Define the project root directory
define('SWARM_ROOT', dirname(__DIR__));

// Change to the directory where the script was called from
$workingDir = getcwd();
chdir($workingDir);

// Look for .env file in current directory or script directory
$envPaths = [
    $workingDir . '/.env',
    __DIR__ . '/../.env',
];

foreach ($envPaths as $envPath) {
    if (file_exists($envPath)) {
        $dotenv = Dotenv::createImmutable(dirname($envPath));
        $dotenv->load();
        break;
    }
}

// Run the CLI with better exception handling
try {
    require __DIR__ . '/../cli.php';
} catch (Throwable $e) {
    // Try to use our exception handler if available
    if (class_exists('HelgeSverre\Swarm\Core\ExceptionHandler')) {
        $handler = new HelgeSverre\Swarm\Core\ExceptionHandler;
        exit($handler->handle($e));
    }

    // Fallback to basic error display
    fwrite(STDERR, "\033[31mError: " . $e->getMessage() . "\033[0m\n");
    exit(1);
}
