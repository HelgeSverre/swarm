#!/usr/bin/env php
<?php

/**
 * Swarm - AI Coding Assistant CLI
 *
 * @author   Helge Sverre <helge.sverre@gmail.com>
 */

// Find and load the autoloader
$possibleAutoloaders = [
    __DIR__ . '/../vendor/autoload.php',     // Local development
    __DIR__ . '/../../../autoload.php',      // Installed as dependency
    __DIR__ . '/../../vendor/autoload.php',  // Alternative structure
];

$autoloaderFound = false;
foreach ($possibleAutoloaders as $autoloader) {
    if (file_exists($autoloader)) {
        require $autoloader;
        $autoloaderFound = true;
        break;
    }
}

if (!$autoloaderFound) {
    exit("Could not find autoloader. Please run 'composer install' first.\n");
}

// Change to the directory where the script was called from
$workingDir = getcwd();
chdir($workingDir);

// Bootstrap the application
try {
    // Get the bootstrapped application
    $app = require __DIR__ . '/../bootstrap/app.php';
    
    // Create and run the CLI
    $cli = HelgeSverre\Swarm\CLI\Swarm::createFromEnvironment($app);
    $cli->run();
} catch (HelgeSverre\Swarm\Exceptions\ConfigurationException $e) {
    // Handle configuration errors with clean output
    fwrite(STDERR, "\033[31mConfiguration Error: " . $e->getMessage() . "\033[0m\n");
    exit($e->getExitCode());
} catch (Throwable $e) {
    // Try to use our exception handler if available
    if (class_exists('HelgeSverre\Swarm\Core\ExceptionHandler')) {
        $handler = new HelgeSverre\Swarm\Core\ExceptionHandler;
        $handler->handle($e);
    }
    
    // Fallback to basic error display
    fwrite(STDERR, "\033[31mError: " . $e->getMessage() . "\033[0m\n");
    exit(1);
}